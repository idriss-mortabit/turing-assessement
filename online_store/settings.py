"""
Django settings for online_store project.

Generated by 'django-admin startproject' using Django 2.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
PROJECT_PATH = os.path.abspath(os.path.dirname(__file__))
static_dir = PROJECT_PATH + '/static/'
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'b*q#81!6$6h570m19n_%c$%y@8ehy2je^z4n6cg!ordlirc#6*'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['127.0.0.1', 
		 'turing-assessement.herokuapp.com']



# Application definition

INSTALLED_APPS = [
	'jet.dashboard',
	'jet',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
	'online_store.apps.MyappConfig',
    'django.contrib.humanize',
    'dashboardviews',
    'rest_framework',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
]

ROOT_URLCONF = 'online_store.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [static_dir],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'online_store.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql', 
        'NAME': 'tshirtshop',
        'USER': 'tshirtshop',
        'PASSWORD': 'fghZm6aXj4NkZeZ',
        'HOST': 'db4free.net',   # Or an IP Address that your DB is hosted on
        'PORT': '3306',
    }
}
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
#     }
# }
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql', 
#         'NAME': 'da3c0kggkdlpac',
#         'USER': 'laxouxrcgiffwk',
#         'PASSWORD': 'ede747b371f4ef77fc1b87ddc67507307069672d8907a9b6d0e7788b5d245452',
#         'HOST': 'ec2-54-235-67-106.compute-1.amazonaws.com',   # Or an IP Address that your DB is hosted on
#         'PORT': '5432',
#     }
# }
# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(PROJECT_PATH, 'static')
# STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
JET_DEFAULT_THEME = 'light-gray'
JET_SIDE_MENU_COMPACT = True
JET_APP_INDEX_DASHBOARD = 'online_store.dashboard.CustomAppIndexDashboard'
JET_MODULE_GOOGLE_ANALYTICS_CLIENT_SECRETS_FILE = os.path.join(PROJECT_PATH, 'client_secrets.json')
JET_INDEX_DASHBOARD = 'online_store.dashboard.CustomIndexDashboard'
# JET_MODULE_YANDEX_METRIKA_CLIENT_ID = 'b69972c066ea4530a40ee0e39571a2e4'
# JET_MODULE_YANDEX_METRIKA_CLIENT_SECRET = '4bbad8b7eb7b4286aa40cde47e7e3f2a'
JET_THEMES = [
    {
        'theme': 'default', # theme folder name
        'color': '#47bac1', # color of the theme's button in user menu
        'title': 'Default' # theme title
    },
    {
        'theme': 'green',
        'color': '#44b78b',
        'title': 'Green'
    },
    {
        'theme': 'light-green',
        'color': '#2faa60',
        'title': 'Light Green'
    },
    {
        'theme': 'light-violet',
        'color': '#a464c4',
        'title': 'Light Violet'
    },
    {
        'theme': 'light-blue',
        'color': '#5EADDE',
        'title': 'Light Blue'
    },
    {
        'theme': 'light-gray',
        'color': '#222',
        'title': 'Light Gray'
    }
]
JET_SIDE_MENU_ITEMS = [  # A list of application or custom item dicts
    {'label': ('Catalogue'), 'items': [
        {'label': ('Products'), 'name': 'dashboardviews.product'},
        {'label': ('Categories'), 'name': ''},
        {'label': ('Collections'), 'name': ''},
    ]},
    {'label': ('Discounts'), 'items': [
        {'label': ('Sales'), 'name': ''},
        {'label': ('Vouchers'), 'name': ''},
    ]},
    {'label': ('Sales'), 'items': [
        {'label': ('Orders'), 'name': 'dashboardviews.orders'},
        {'label': ('Order Detail'), 'name': 'dashboardviews.ordersdetail'},
        {'label': ('Customers'), 'name': 'dashboardviews.customer'},
    ]},
    {'label': ('Configuration'), 'items': [
        {'label': ('Products Types'), 'name': ''},
        {'label': ('Attributes'), 'name': ''},
    ]},
    {'label': ('Category'), 'items': [
        {'label': ('Products'), 'name': 'dashboardviews.category'},
    ]},
]
